% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Episode.R
\name{Episode}
\alias{Episode}
\title{Class representing XML source of a Carpentries episode}
\description{
Wrapper around an xml document to manipulate and inspect Carpentries episodes
}
\details{
The Episode class is a superclass of \code{\link[tinkr:yarn]{tinkr::yarn()}}, which transforms
(commonmark-formatted) Markdown to XML and back again. The extension that
the Episode class provides is support for both \href{https://pandoc.org}{Pandoc}
and \href{https://kramdown.gettalong.org/}{kramdown} flavours of Markdown.

Read more about this class in \code{vignette("intro-episode", package = "pegboard")}.
}
\note{
The current XLST spec for {tinkr} does not support kramdown, which
the Carpentries Episodes are styled with, thus some block tags will be
destructively modified in the conversion.
}
\examples{

## ------------------------------------------------
## Method `Episode$new`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$name
scope$lesson
scope$challenges

## ------------------------------------------------
## Method `Episode$get_blocks`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
# get all the challenges
scope$get_blocks(".challenge")
# get the solutions
scope$get_blocks(".solution", level = 2)
\dontrun{

  # download the source files for r-novice-gampinder into a Lesson object
  rng <- get_lesson("swcarpentry/r-novice-gapminder")
  dsp1 <- rng$episodes[["04-data-structures-part1.md"]]
  # There are 9 blocks in total
  dsp1$get_blocks()
  # One is a callout block
  dsp1$get_blocks(".callout")
  # One is a discussion block
  dsp1$get_blocks(".discussion")
  # Seven are Challenge blocks
  dsp1$get_blocks(".challenge")
  # There are eight solution blocks:
  dsp1$get_blocks(".solution", level = 2L)
}

## ------------------------------------------------
## Method `Episode$get_images`
## ------------------------------------------------


loop <- Episode$new(file.path(lesson_fragment(), "_episodes", "14-looping-data-sets.md"))
loop$get_images()
loop$get_images(process = TRUE)

## ------------------------------------------------
## Method `Episode$get_challenge_graph`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$get_challenge_graph()

## ------------------------------------------------
## Method `Episode$show`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$head()
scope$tail()
scope$show()

## ------------------------------------------------
## Method `Episode$write`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$write()

## ------------------------------------------------
## Method `Episode$handout`
## ------------------------------------------------

lsn <- Lesson$new(lesson_fragment("sandpaper-fragment"), jekyll = FALSE)
e <- lsn$episodes[[1]]
cat(e$handout())
cat(e$handout(solution = TRUE))

## ------------------------------------------------
## Method `Episode$reset`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
xml2::xml_text(scope$tags[1])
xml2::xml_set_text(scope$tags[1], "{: .code}")
xml2::xml_text(scope$tags[1])
scope$reset()
xml2::xml_text(scope$tags[1])

## ------------------------------------------------
## Method `Episode$isolate_blocks`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$body # a full document with block quotes and code blocks, etc
scope$isolate_blocks()$body # only one challenge block_quote

## ------------------------------------------------
## Method `Episode$unblock`
## ------------------------------------------------

loop <- Episode$new(file.path(lesson_fragment(), "_episodes", "14-looping-data-sets.md"))
loop$body # a full document with block quotes and code blocks, etc
loop$get_blocks() # all the blocks in the episode
loop$unblock()
loop$get_blocks() # no blocks
loop$code # now there are two blocks with challenge tags

## ------------------------------------------------
## Method `Episode$validate_headings`
## ------------------------------------------------

# Example: There are multiple headings called "Solution" that are not
# nested within a higher-level heading and will throw an error
loop <- Episode$new(file.path(lesson_fragment(), "_episodes", "14-looping-data-sets.md"))
loop$validate_headings()

## ------------------------------------------------
## Method `Episode$validate_divs`
## ------------------------------------------------

loop <- Episode$new(file.path(lesson_fragment(), "_episodes", "14-looping-data-sets.md"))
loop$validate_divs()

## ------------------------------------------------
## Method `Episode$validate_links`
## ------------------------------------------------

loop <- Episode$new(file.path(lesson_fragment(), "_episodes", "14-looping-data-sets.md"))
loop$validate_links()
}
\section{Super class}{
\code{\link[tinkr:yarn]{tinkr::yarn}} -> \code{Episode}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{children}}{[\code{character}] a vector of absolute paths to child
files if they exist.}

\item{\code{parents}}{[\code{character}] a vector of absolute paths to immediate
parent files if they exist}

\item{\code{build_parents}}{[\code{character}] a vector of absolute paths to the
final parent files that will trigger this child file to build}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{show_problems}}{[\code{list}] a list of all the problems that occurred in parsing the episode}

\item{\code{headings}}{[\code{xml_nodeset}] all headings in the document}

\item{\code{links}}{[\code{xml_nodeset}] all links (not images) in the document}

\item{\code{images}}{[\code{xml_nodeset}] all image sources in the document}

\item{\code{tags}}{[\code{xml_nodeset}] all the kramdown tags from the episode}

\item{\code{questions}}{[\code{character}] the questions from the episode}

\item{\code{keypoints}}{[\code{character}] the keypoints from the episode}

\item{\code{objectives}}{[\code{character}] the objectives from the episode}

\item{\code{challenges}}{[\code{xml_nodeset}] all the challenges blocks from the episode}

\item{\code{solutions}}{[\code{xml_nodeset}] all the solutions blocks from the episode}

\item{\code{output}}{[\code{xml_nodeset}] all the output blocks from the episode}

\item{\code{error}}{[\code{xml_nodeset}] all the error blocks from the episode}

\item{\code{warning}}{[\code{xml_nodeset}] all the warning blocks from the episode}

\item{\code{code}}{[\code{xml_nodeset}] all the code blocks from the episode}

\item{\code{name}}{[\code{character}] the name of the source file without the path}

\item{\code{lesson}}{[\code{character}] the path to the lesson where the episode is from}

\item{\code{has_children}}{[\code{logical}] an indicator of the presence of child
files (\code{TRUE}) or their absence (\code{FALSE})}

\item{\code{has_parents}}{[\code{logical}] an indicator of the presence of parent
files (\code{TRUE}) or their absence (\code{FALSE})}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Episode-new}{\code{Episode$new()}}
\item \href{#method-Episode-confirm_sandpaper}{\code{Episode$confirm_sandpaper()}}
\item \href{#method-Episode-get_blocks}{\code{Episode$get_blocks()}}
\item \href{#method-Episode-get_images}{\code{Episode$get_images()}}
\item \href{#method-Episode-label_divs}{\code{Episode$label_divs()}}
\item \href{#method-Episode-get_divs}{\code{Episode$get_divs()}}
\item \href{#method-Episode-get_yaml}{\code{Episode$get_yaml()}}
\item \href{#method-Episode-use_dovetail}{\code{Episode$use_dovetail()}}
\item \href{#method-Episode-use_sandpaper}{\code{Episode$use_sandpaper()}}
\item \href{#method-Episode-remove_error}{\code{Episode$remove_error()}}
\item \href{#method-Episode-remove_output}{\code{Episode$remove_output()}}
\item \href{#method-Episode-move_objectives}{\code{Episode$move_objectives()}}
\item \href{#method-Episode-move_keypoints}{\code{Episode$move_keypoints()}}
\item \href{#method-Episode-move_questions}{\code{Episode$move_questions()}}
\item \href{#method-Episode-get_challenge_graph}{\code{Episode$get_challenge_graph()}}
\item \href{#method-Episode-show}{\code{Episode$show()}}
\item \href{#method-Episode-head}{\code{Episode$head()}}
\item \href{#method-Episode-tail}{\code{Episode$tail()}}
\item \href{#method-Episode-write}{\code{Episode$write()}}
\item \href{#method-Episode-handout}{\code{Episode$handout()}}
\item \href{#method-Episode-reset}{\code{Episode$reset()}}
\item \href{#method-Episode-isolate_blocks}{\code{Episode$isolate_blocks()}}
\item \href{#method-Episode-unblock}{\code{Episode$unblock()}}
\item \href{#method-Episode-summary}{\code{Episode$summary()}}
\item \href{#method-Episode-validate_headings}{\code{Episode$validate_headings()}}
\item \href{#method-Episode-validate_divs}{\code{Episode$validate_divs()}}
\item \href{#method-Episode-validate_links}{\code{Episode$validate_links()}}
\item \href{#method-Episode-clone}{\code{Episode$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="tinkr" data-topic="yarn" data-id="add_md"><a href='../../tinkr/html/yarn.html#method-yarn-add_md'><code>tinkr::yarn$add_md()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tinkr" data-topic="yarn" data-id="get_protected"><a href='../../tinkr/html/yarn.html#method-yarn-get_protected'><code>tinkr::yarn$get_protected()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tinkr" data-topic="yarn" data-id="md_vec"><a href='../../tinkr/html/yarn.html#method-yarn-md_vec'><code>tinkr::yarn$md_vec()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tinkr" data-topic="yarn" data-id="protect_curly"><a href='../../tinkr/html/yarn.html#method-yarn-protect_curly'><code>tinkr::yarn$protect_curly()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tinkr" data-topic="yarn" data-id="protect_math"><a href='../../tinkr/html/yarn.html#method-yarn-protect_math'><code>tinkr::yarn$protect_math()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tinkr" data-topic="yarn" data-id="protect_unescaped"><a href='../../tinkr/html/yarn.html#method-yarn-protect_unescaped'><code>tinkr::yarn$protect_unescaped()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-new"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-new}{}}}
\subsection{Method \code{new()}}{
Create a new Episode
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$new(
  path = NULL,
  process_tags = TRUE,
  fix_links = TRUE,
  fix_liquid = FALSE,
  parents = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{[\code{character}] path to a markdown episode file on disk}

\item{\code{process_tags}}{[\code{logical}] if \code{TRUE} (default), kramdown tags will
be processed into attributes of the parent nodes. If \code{FALSE}, these
tags will be treated as text}

\item{\code{fix_links}}{[\code{logical}] if \code{TRUE} (default), links pointing to
liquid tags (e.g. \code{{{ page.root }}}) and included links (those supplied
by a call to \verb{\{\\\% import links.md \\\%\}}) will be appropriately processed
as valid links.}

\item{\code{fix_liquid}}{[\code{logical}] defaults to \code{FALSE}, which means data is
immediately passed to \link[tinkr:yarn]{tinkr::yarn}. If \code{TRUE}, all liquid variables
in relative links have spaces removed to allow the commonmark parser to
interpret them as links.}

\item{\code{parents}}{[\code{list}] a list of \code{Episode} objects that represent the
immediate parents of this child}

\item{\code{...}}{arguments passed on to \link[tinkr:yarn]{tinkr::yarn} and \code{\link[tinkr:to_xml]{tinkr::to_xml()}}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new Episode object with extracted XML data
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$name
scope$lesson
scope$challenges
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-confirm_sandpaper"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-confirm_sandpaper}{}}}
\subsection{Method \code{confirm_sandpaper()}}{
enforce that the episode is a {sandpaper} episode withtout
going through the conversion steps. The default Episodes from pegboard
were assumed to be generated using Jekyll with kramdown syntax. This is
a bit of a kludge to bypass the normal checks for kramdown syntax and
just assume pandoc syntax
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$confirm_sandpaper()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-get_blocks"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-get_blocks}{}}}
\subsection{Method \code{get_blocks()}}{
return all \code{block_quote} elements within the Episode
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$get_blocks(type = NULL, level = 1L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{the type of block quote in the Jekyll syntax like ".challenge",
".discussion", or ".solution"}

\item{\code{level}}{the level of the block within the document. Defaults to \code{1},
which represents all of the block_quotes are not nested within any other
block quotes. Increase the nubmer to increase the level of nesting.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
[\code{xml_nodeset}] all the blocks from the episode with the given
tag and level.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
# get all the challenges
scope$get_blocks(".challenge")
# get the solutions
scope$get_blocks(".solution", level = 2)
\dontrun{

  # download the source files for r-novice-gampinder into a Lesson object
  rng <- get_lesson("swcarpentry/r-novice-gapminder")
  dsp1 <- rng$episodes[["04-data-structures-part1.md"]]
  # There are 9 blocks in total
  dsp1$get_blocks()
  # One is a callout block
  dsp1$get_blocks(".callout")
  # One is a discussion block
  dsp1$get_blocks(".discussion")
  # Seven are Challenge blocks
  dsp1$get_blocks(".challenge")
  # There are eight solution blocks:
  dsp1$get_blocks(".solution", level = 2L)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-get_images"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-get_images}{}}}
\subsection{Method \code{get_images()}}{
fetch the image sources and optionally process them for easier parsing.
The default version of this function is equivalent to the active binding
\verb{$images}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$get_images(process = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{process}}{if \code{TRUE}, images will be processed via the internal
function \code{\link[=process_images]{process_images()}}, which will add the \code{alt} attribute, if
available and extract img nodes from HTML blocks.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
an \code{xml_nodelist}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
loop <- Episode$new(file.path(lesson_fragment(), "_episodes", "14-looping-data-sets.md"))
loop$get_images()
loop$get_images(process = TRUE)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-label_divs"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-label_divs}{}}}
\subsection{Method \code{label_divs()}}{
label all the div elements within the Episode to extract them with
\verb{$get_divs()}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$label_divs()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-get_divs"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-get_divs}{}}}
\subsection{Method \code{get_divs()}}{
return all div elements within the Episode
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$get_divs(type = NULL, include = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{the type of div tag (e.g. 'challenge' or 'solution')}

\item{\code{include}}{\verb{\[logical\]} if \code{TRUE}, the div tags will be included in
the output. Defaults to \code{FALSE}, which will only return the text between
the div tags.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-get_yaml"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-get_yaml}{}}}
\subsection{Method \code{get_yaml()}}{
Extract the yaml metadata from the episode
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$get_yaml()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-use_dovetail"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-use_dovetail}{}}}
\subsection{Method \code{use_dovetail()}}{
Ammend or add a setup code block to use \code{{dovetail}}

This will convert your lesson to use the {dovetail} R package for
processing specialized block quotes which will do two things:
\enumerate{
\item convert your lesson from md to Rmd
\item add to your setup chunk the following code

\if{html}{\out{<div class="sourceCode">}}\preformatted{library('dovetail')
source(dvt_opts())
}\if{html}{\out{</div>}}
}

If there is no setup chunk, one will be created. If there is a setup
chunk, then the \code{source} and \code{knitr_fig_path} calls will be removed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$use_dovetail()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-use_sandpaper"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-use_sandpaper}{}}}
\subsection{Method \code{use_sandpaper()}}{
Use the sandpaper package for processing

This will convert your lesson to use the \code{{sandpaper}} R package for
processing the lesson instead of Jekyll (default). Doing this will have
the following effects:
\enumerate{
\item code blocks that were marked with liquid tags (e.g. \verb{\{: .language-r\}}
are converted to standard code blocks or Rmarkdown chunks (with
language information at the top of the code block)
\item If rmarkdown is used and the lesson contains python code,
\code{library('reticulate')} will be added to the setup chunk of the
lesson.
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$use_sandpaper(rmd = FALSE, yml = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{rmd}}{if \code{TRUE}, lessons will be converted to RMarkdown documents}

\item{\code{yml}}{the list derived from the yml file for the episode}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-remove_error"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-remove_error}{}}}
\subsection{Method \code{remove_error()}}{
Remove error blocks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$remove_error()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-remove_output"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-remove_output}{}}}
\subsection{Method \code{remove_output()}}{
Remove output blocks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$remove_output()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-move_objectives"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-move_objectives}{}}}
\subsection{Method \code{move_objectives()}}{
move the objectives yaml item to the body
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$move_objectives()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-move_keypoints"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-move_keypoints}{}}}
\subsection{Method \code{move_keypoints()}}{
move the keypoints yaml item to the body
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$move_keypoints()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-move_questions"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-move_questions}{}}}
\subsection{Method \code{move_questions()}}{
move the questions yaml item to the body
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$move_questions()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-get_challenge_graph"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-get_challenge_graph}{}}}
\subsection{Method \code{get_challenge_graph()}}{
Create a graph of the top-level elements for the challenges.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$get_challenge_graph(recurse = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{recurse}}{if \code{TRUE} (default), the content of the solutions will be
included in the graph; \code{FALSE} will keep the solutions as \code{block_quote}
elements.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data frame with four columns representing all the elements
within the challenges in the Episode:
\itemize{
\item Block: The sequential number of the challenge block
\item from: the inward elements
\item to: the outward elements
\item pos: the position in the markdown document
}

Note that there are three special node names:
\itemize{
\item challenge: start or end of the challenge block
\item solution: start of the solution block
\item lesson: start of the lesson block
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$get_challenge_graph()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-show"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-show}{}}}
\subsection{Method \code{show()}}{
show the markdown contents on the screen
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$show(n = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{a subset of elements to show, default TRUE for all lines}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a character vector with one line for each line of output
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$head()
scope$tail()
scope$show()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-head"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-head}{}}}
\subsection{Method \code{head()}}{
show the first n lines of markdown contents on the screen
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$head(n = 6L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{the number of lines to show from the top}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a character vector with one line for each line of output
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-tail"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-tail}{}}}
\subsection{Method \code{tail()}}{
show the first n lines of markdown contents on the screen
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$tail(n = 6L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{the number of lines to show from the top}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a character vector with one line for each line of output
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-write"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-write}{}}}
\subsection{Method \code{write()}}{
write the episode to disk as markdown
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$write(path = NULL, format = "md", edit = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{the path to write your file to. Defaults to an empty
directory in your temporary folder}

\item{\code{format}}{one of "md" (default) or "xml". This will
create a file with the correct extension in the path}

\item{\code{edit}}{if \code{TRUE}, the file will open in an editor. Defaults to
\code{FALSE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the episode object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$write()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-handout"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-handout}{}}}
\subsection{Method \code{handout()}}{
Create a trimmed-down RMarkdown document that strips prose and contains
only important code chunks and challenge blocks without solutions.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$handout(path = NULL, solutions = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{(handout) a path to an R Markdown file to write. If this is
\code{NULL}, no file will be written and the lines of the output will be
returned.}

\item{\code{solutions}}{if \code{TRUE}, include solutions in the output. Defaults to
\code{FALSE}, which removes the solution blocks.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a character vector if \code{path = NULL}, otherwise, it is called for
the side effect of creating a file.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{lsn <- Lesson$new(lesson_fragment("sandpaper-fragment"), jekyll = FALSE)
e <- lsn$episodes[[1]]
cat(e$handout())
cat(e$handout(solution = TRUE))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-reset"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-reset}{}}}
\subsection{Method \code{reset()}}{
Re-read episode from disk
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$reset()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the episode object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
xml2::xml_text(scope$tags[1])
xml2::xml_set_text(scope$tags[1], "{: .code}")
xml2::xml_text(scope$tags[1])
scope$reset()
xml2::xml_text(scope$tags[1])
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-isolate_blocks"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-isolate_blocks}{}}}
\subsection{Method \code{isolate_blocks()}}{
Remove all elements except for those within block quotes that have a
kramdown tag. Note that this is a destructive process.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$isolate_blocks()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the Episode object, invisibly
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$body # a full document with block quotes and code blocks, etc
scope$isolate_blocks()$body # only one challenge block_quote
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-unblock"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-unblock}{}}}
\subsection{Method \code{unblock()}}{
convert challenge blocks to roxygen-like code blocks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$unblock(token = "#'", force = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{token}}{the token to use to indicate non-code, Defaults to "#'"}

\item{\code{force}}{force the conversion even if the conversion has already
taken place}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the Episode object, invisibly
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{loop <- Episode$new(file.path(lesson_fragment(), "_episodes", "14-looping-data-sets.md"))
loop$body # a full document with block quotes and code blocks, etc
loop$get_blocks() # all the blocks in the episode
loop$unblock()
loop$get_blocks() # no blocks
loop$code # now there are two blocks with challenge tags
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-summary"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-summary}{}}}
\subsection{Method \code{summary()}}{
Get a high-level summary of the elements in the episode
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$summary()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
a data frame with counts of the following elements per page:
\itemize{
\item sections: level 2 headings
\item headings: all headings
\item callouts: all callouts
\item challenges: subset of callouts
\item solutions: subset of callouts
\item code: all code block elements (excluding inline code)
\item output: subset of code that is displayed as output
\item warnining: subset of code that is displayed as a warning
\item error: subset of code that is displayed as an error
\item images: all images in markdown or HTML
\item links: all links in markdown or HTML
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-validate_headings"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-validate_headings}{}}}
\subsection{Method \code{validate_headings()}}{
perform validation on headings in a document.

This will validate the following aspects of all headings:
\itemize{
\item first heading starts at level 2 (\code{first_heading_is_second_level})
\item greater than level 1 (\code{greater_than_first_level})
\item increse sequentially (e.g. no jumps from 2 to 4) (\code{are_sequential})
\item have names (\code{have_names})
\item unique in their own hierarchy (\code{are_unique})
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$validate_headings(verbose = TRUE, warn = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{if \code{TRUE} (default), a message for each rule broken will
be issued to the stderr. if \code{FALSE}, this will be silent.}

\item{\code{warn}}{if \code{TRUE} (default), a warning will be issued if there are
any failures in the tests.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data frame with a variable number of rows and the follwoing
columns:
\itemize{
\item \strong{episode} the filename of the episode
\item \strong{heading} the text from a heading
\item \strong{level} the heading level
\item \strong{pos} the position of the heading in the document
\item \strong{node} the XML node that represents the heading
\item (the next five columns are the tests listed above)
\item \strong{path} the path to the file.
}

Each row in the data frame represents an individual heading across the
Lesson. See \code{\link[=validate_headings]{validate_headings()}} for more details.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Example: There are multiple headings called "Solution" that are not
# nested within a higher-level heading and will throw an error
loop <- Episode$new(file.path(lesson_fragment(), "_episodes", "14-looping-data-sets.md"))
loop$validate_headings()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-validate_divs"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-validate_divs}{}}}
\subsection{Method \code{validate_divs()}}{
perform validation on divs in a document.

This will validate the following aspects of divs. See \code{\link[=validate_divs]{validate_divs()}}
for details.
\itemize{
\item divs are of a known type (\code{is_known})
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$validate_divs(warn = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{warn}}{if \code{TRUE} (default), a warning message will be if there are
any divs determined to be invalid. Set to \code{FALSE} if you want the
table for processing later.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a logical \code{TRUE} for valid divs and \code{FALSE} for invalid
divs.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{loop <- Episode$new(file.path(lesson_fragment(), "_episodes", "14-looping-data-sets.md"))
loop$validate_divs()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-validate_links"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-validate_links}{}}}
\subsection{Method \code{validate_links()}}{
perform validation on links and images in a document.

This will validate the following aspects of links. See \code{\link[=validate_links]{validate_links()}}
for details.
\itemize{
\item External links use HTTPS (\code{enforce_https})
\item Internal links exist (\code{internal_okay})
\item External links are reachable (\code{all_reachable}) (planned)
\item Images have alt text (\code{img_alt_text})
\item Link text is descriptive (\code{descriptive})
\item Link text is more than a single letter (\code{link_length})
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$validate_links(warn = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{warn}}{if \code{TRUE} (default), a warning message will be if there are
any links determined to be invalid. Set to \code{FALSE} if you want the
table for processing later.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a logical \code{TRUE} for valid links and \code{FALSE} for invalid
links.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{loop <- Episode$new(file.path(lesson_fragment(), "_episodes", "14-looping-data-sets.md"))
loop$validate_links()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Episode-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Episode-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
